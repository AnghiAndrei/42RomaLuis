services:
  # reverse-proxy
  proxy:
    container_name: proxy
    restart: always
    build:
      context: ./proxy
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - proxy
    depends_on:
      - frontend-node
      - backend-django-game1
      - backend-django-users

  # FrontEnd Node.js
  frontend-node:
    container_name: frontend-node
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - proxy
    volumes:
      - vol_img_users:/app/img/app/img_users
  
  # BackEnd DJango Users
  backend-django-users:
    container_name: backend-django-users
    restart: always
    build:
      context: ./backend/users
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - proxy
    volumes:
      - vol_img_users:/app/img_users
    depends_on:
      - postgres

  # BackEnd Chat
  backend-django-chat:
    container_name: backend-django-chat
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - proxy
    ports:
      - "8005:8005"

  # BackEnd DJango Game1
  backend-django-game1:
    container_name: backend-django-game1
    restart: always
    build:
      context: ./backend/game1
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - proxy
    depends_on:
      - postgres

  # PostGresSQL
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    env_file:
      - .env
    networks:
      - proxy
    volumes:
      - db_postgres:/var/lib/postgresql/data

# Networks configuration
networks:
  proxy:
    driver: bridge

# Volumes
volumes:
  vol_img_users:
    driver: local
  db_postgres:
    driver: local
